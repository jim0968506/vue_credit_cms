{"ast":null,"code":"import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport { userInfo } from \"@/apis/user.js\";\nimport router from \"@/router/index\";\nimport axios from \"axios\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    //聲明一個選單陣列,開始從本地儲存中讀取，使用JSON.parse是因為存的時候轉成JSON，如果沒有給你個空陣列\n    menuList: JSON.parse(localStorage.getItem(\"menuList\")) || [],\n    userName: localStorage.getItem(\"userName\") || \"\"\n  },\n  mutations: {\n    //用於改變選單陣列的值，順便持久化儲存\n    GETMENULIST(state, menuList) {\n      state.menuList = menuList;\n      //轉成JSON物件\n      localStorage.setItem(\"menuList\", JSON.stringify(menuList));\n    },\n    NAMEUPDATE(state, userName) {\n      state.userName = userName;\n      localStorage.setItem(\"userName\", userName);\n    }\n  },\n  actions: {\n    async getMenuList({\n      commit\n    }) {\n      //使用這個請求方法，獲取使用者角色，需要請求頭中有token\n      let res = await userInfo();\n      //如果返回不等於20000代表token失效了\n      if (res.data.code !== 20000) return;\n      let role = res.data.data.roles[0].name;\n      //請求選單列表\n      let res2 = await axios.get(\"/menus.json\");\n      //用list儲存選單列表\n      let list = res2.data;\n      let menuList = [];\n      let routes = [];\n      //使用者判斷\n      if (role === \"administrator\") {\n        //如果是管理員則獲得所有許可權\n        routes = list;\n      } else if (role === \"input\") {\n        //如果是銷售人員則獲得銷售許可權\n        routes = list.filter(item => item.meta && item.meta.roles && item.meta.roles.indexOf(role) != -1 || item.meta.title === \"首頁\");\n      } else if (role === \"approve\") {\n        //如果是審核人員則獲得審批管理的初審許可權\n        routes = list.filter(item => item.meta && item.meta.roles && item.meta.roles.indexOf(role) != -1 || item.meta.title === \"首頁\");\n        //過濾掉審批管理的終審\n        routes = routes.map(item => {\n          if (item.children) {\n            item.children.forEach((it, index) => {\n              if (it.meta.title === \"終審\") {\n                delete item.children[index];\n              }\n            });\n          }\n          return item;\n        });\n      }\n      //接收格式化的選單\n      menuList = routes.map(item => {\n        //如果選單有childeren\n        if (item.children) {\n          item.children.map(it => {\n            let path = it.path1;\n            it.component = () => import(`@/views${path}.vue`);\n          });\n        }\n        //如果選單沒有childeren\n        let url = item.component;\n        item.component = () => import(`@/layout/${url}.vue`);\n        //把路由新增到路由器中\n        router.addRoute(item);\n\n        //格式化選單，把path和meta拿出來\n        let {\n          path,\n          meta\n        } = item;\n        if (item.children) {\n          //如果有children把他也格式化\n          item.children = item.children.map(it => {\n            let {\n              meta,\n              path\n            } = it;\n            return {\n              path,\n              title: meta.title\n            };\n          });\n          return {\n            path,\n            title: meta.title,\n            children: item.children\n          };\n        }\n        //沒有children就直接格式化\n        return {\n          path,\n          title: meta.title\n        };\n      });\n      //呼叫mutations的方法\n      commit(\"GETMENULIST\", menuList);\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","userInfo","router","axios","use","Store","state","menuList","JSON","parse","localStorage","getItem","userName","mutations","GETMENULIST","setItem","stringify","NAMEUPDATE","actions","getMenuList","commit","res","data","code","role","roles","name","res2","get","list","routes","filter","item","meta","indexOf","title","map","children","forEach","it","index","path","path1","component","url","addRoute"],"sources":["C:/Users/jim09/Desktop/cms/vue-project/src/store/index.js"],"sourcesContent":["import Vue from \"vue\"\nimport Vuex from \"vuex\"\nimport { userInfo } from \"@/apis/user.js\"\nimport router from \"@/router/index\"\nimport axios from \"axios\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    //聲明一個選單陣列,開始從本地儲存中讀取，使用JSON.parse是因為存的時候轉成JSON，如果沒有給你個空陣列\n    menuList: JSON.parse(localStorage.getItem(\"menuList\")) || [],\n    userName: localStorage.getItem(\"userName\") || \"\",\n  },\n  mutations: {\n    //用於改變選單陣列的值，順便持久化儲存\n    GETMENULIST(state, menuList) {\n      state.menuList = menuList\n      //轉成JSON物件\n      localStorage.setItem(\"menuList\", JSON.stringify(menuList))\n    },\n    NAMEUPDATE(state, userName) {\n      state.userName = userName\n      localStorage.setItem(\"userName\", userName)\n    },\n  },\n  actions: {\n    async getMenuList({ commit }) {\n      //使用這個請求方法，獲取使用者角色，需要請求頭中有token\n      let res = await userInfo()\n      //如果返回不等於20000代表token失效了\n      if (res.data.code !== 20000) return\n      let role = res.data.data.roles[0].name\n      //請求選單列表\n      let res2 = await axios.get(\"/menus.json\")\n      //用list儲存選單列表\n      let list = res2.data\n      let menuList = []\n      let routes = []\n      //使用者判斷\n      if (role === \"administrator\") {\n        //如果是管理員則獲得所有許可權\n        routes = list\n      } else if (role === \"input\") {\n        //如果是銷售人員則獲得銷售許可權\n        routes = list.filter(\n          (item) =>\n            (item.meta &&\n              item.meta.roles &&\n              item.meta.roles.indexOf(role) != -1) ||\n            item.meta.title === \"首頁\"\n        )\n      } else if (role === \"approve\") {\n        //如果是審核人員則獲得審批管理的初審許可權\n        routes = list.filter(\n          (item) =>\n            (item.meta &&\n              item.meta.roles &&\n              item.meta.roles.indexOf(role) != -1) ||\n            item.meta.title === \"首頁\"\n        )\n        //過濾掉審批管理的終審\n        routes = routes.map((item) => {\n          if (item.children) {\n            item.children.forEach((it, index) => {\n              if (it.meta.title === \"終審\") {\n                delete item.children[index]\n              }\n            })\n          }\n          return item\n        })\n      }\n      //接收格式化的選單\n      menuList = routes.map((item) => {\n        //如果選單有childeren\n        if (item.children) {\n          item.children.map((it) => {\n            let path = it.path1\n            it.component = () => import(`@/views${path}.vue`)\n          })\n        }\n        //如果選單沒有childeren\n        let url = item.component\n        item.component = () => import(`@/layout/${url}.vue`)\n        //把路由新增到路由器中\n        router.addRoute(item)\n\n        //格式化選單，把path和meta拿出來\n        let { path, meta } = item\n        if (item.children) {\n          //如果有children把他也格式化\n          item.children = item.children.map((it) => {\n            let { meta, path } = it\n            return { path, title: meta.title }\n          })\n          return { path, title: meta.title, children: item.children }\n        }\n        //沒有children就直接格式化\n        return { path, title: meta.title }\n      })\n      //呼叫mutations的方法\n      commit(\"GETMENULIST\", menuList)\n    },\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}